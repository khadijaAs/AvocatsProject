'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _baseError = require('base-error');

var _baseError2 = _interopRequireDefault(_baseError);

var _StatusCode = require('./StatusCode');

var _StatusCode2 = _interopRequireDefault(_StatusCode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WebError = function (_BaseError) {
  _inherits(WebError, _BaseError);

  function WebError() {
    var status = arguments.length <= 0 || arguments[0] === undefined ? 500 : arguments[0];
    var message = arguments.length <= 1 || arguments[1] === undefined ? _StatusCode2.default[status] : arguments[1];
    var errors = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

    _classCallCheck(this, WebError);

    var _this = _possibleConstructorReturn(this, (WebError.__proto__ || Object.getPrototypeOf(WebError)).call(this, message));

    _this.status = status;
    _this.errors = errors;
    return _this;
  }

  return WebError;
}(_baseError2.default);

exports.default = WebError;


WebError.prototype.name = 'WebError';